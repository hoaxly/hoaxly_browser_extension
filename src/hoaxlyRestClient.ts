/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.19.0.0 (NJsonSchema v9.10.72.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export module HoaxlyRestClient {

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return An item with reviews
     */
    apiCheckGet(claimUrl: string): Promise<ClaimReviewResponse> {
        let url_ = this.baseUrl + "/api/check?";
        if (claimUrl === undefined || claimUrl === null)
            throw new Error("The parameter 'claimUrl' must be defined and cannot be null.");
        else
            url_ += "claimUrl=" + encodeURIComponent("" + claimUrl) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Content-Type": "application/json", 
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processApiCheckGet(_response);
        });
    }

    protected processApiCheckGet(response: Response): Promise<ClaimReviewResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ClaimReviewResponse.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = resultData404 ? NotFoundResponse.fromJS(resultData404) : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result404);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = resultData400 ? BadRequestResponse.fromJS(resultData400) : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, result400);
            });
        } else {
            return response.text().then((_responseText) => {
            let resultdefault: any = null;
            let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            resultdefault = resultDatadefault ? ErrorResponse.fromJS(resultDatadefault) : <any>null;
            return throwException("A server error occurred.", status, _responseText, _headers, resultdefault);
            });
        }
    }
}

export class ErrorResponse implements IErrorResponse {
    code!: number;
    message!: string;

    constructor(data?: IErrorResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"];
            this.message = data["message"];
        }
    }

    static fromJS(data: any): ErrorResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IErrorResponse {
    code: number;
    message: string;
}

export class NotFoundResponse implements INotFoundResponse {
    code!: number;
    message!: string;

    constructor(data?: INotFoundResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"];
            this.message = data["message"];
        }
    }

    static fromJS(data: any): NotFoundResponse {
        data = typeof data === 'object' ? data : {};
        let result = new NotFoundResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["message"] = this.message;
        return data; 
    }
}

export interface INotFoundResponse {
    code: number;
    message: string;
}

export class BadRequestResponse implements IBadRequestResponse {
    code!: number;
    message!: string;

    constructor(data?: IBadRequestResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"];
            this.message = data["message"];
        }
    }

    static fromJS(data: any): BadRequestResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BadRequestResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["message"] = this.message;
        return data; 
    }
}

export interface IBadRequestResponse {
    code: number;
    message: string;
}

export class ClaimReviewResponse implements IClaimReviewResponse {
    status?: number | undefined;
    data?: Data | undefined;

    constructor(data?: IClaimReviewResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.status = data["status"];
            this.data = data["data"] ? Data.fromJS(data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ClaimReviewResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ClaimReviewResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IClaimReviewResponse {
    status?: number | undefined;
    data?: Data | undefined;
}

export class Review implements IReview {
    ratings?: Ratings | undefined;
    title?: string | undefined;
    url?: string | undefined;
    datePublished?: string | undefined;
    dateModified?: string | undefined;
    publisher?: Publisher | undefined;
    authors?: Authors | undefined;
    summary?: string | undefined;
    language?: string | undefined;
    id?: number | undefined;

    constructor(data?: IReview) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.ratings = data["ratings"] ? Ratings.fromJS(data["ratings"]) : <any>undefined;
            this.title = data["title"];
            this.url = data["url"];
            this.datePublished = data["datePublished"];
            this.dateModified = data["dateModified"];
            this.publisher = data["publisher"] ? Publisher.fromJS(data["publisher"]) : <any>undefined;
            this.authors = data["Authors"] ? Authors.fromJS(data["Authors"]) : <any>undefined;
            this.summary = data["summary"];
            this.language = data["language"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): Review {
        data = typeof data === 'object' ? data : {};
        let result = new Review();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ratings"] = this.ratings ? this.ratings.toJSON() : <any>undefined;
        data["title"] = this.title;
        data["url"] = this.url;
        data["datePublished"] = this.datePublished;
        data["dateModified"] = this.dateModified;
        data["publisher"] = this.publisher ? this.publisher.toJSON() : <any>undefined;
        data["Authors"] = this.authors ? this.authors.toJSON() : <any>undefined;
        data["summary"] = this.summary;
        data["language"] = this.language;
        data["id"] = this.id;
        return data; 
    }
}

export interface IReview {
    ratings?: Ratings | undefined;
    title?: string | undefined;
    url?: string | undefined;
    datePublished?: string | undefined;
    dateModified?: string | undefined;
    publisher?: Publisher | undefined;
    authors?: Authors | undefined;
    summary?: string | undefined;
    language?: string | undefined;
    id?: number | undefined;
}

export class Data implements IData {
    id?: number | undefined;
    url!: string;
    claimPublisherName?: string | undefined;
    claimReviewed?: string | undefined;
    reviews?: Review[] | undefined;

    constructor(data?: IData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.url = data["url"];
            this.claimPublisherName = data["claimPublisherName"];
            this.claimReviewed = data["claimReviewed"];
            if (data["reviews"] && data["reviews"].constructor === Array) {
                this.reviews = [];
                for (let item of data["reviews"])
                    this.reviews.push(Review.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Data {
        data = typeof data === 'object' ? data : {};
        let result = new Data();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["url"] = this.url;
        data["claimPublisherName"] = this.claimPublisherName;
        data["claimReviewed"] = this.claimReviewed;
        if (this.reviews && this.reviews.constructor === Array) {
            data["reviews"] = [];
            for (let item of this.reviews)
                data["reviews"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IData {
    id?: number | undefined;
    url: string;
    claimPublisherName?: string | undefined;
    claimReviewed?: string | undefined;
    reviews?: Review[] | undefined;
}

export class Ratings implements IRatings {
    originalRatingValue?: number | undefined;
    alternateName?: string | undefined;
    simplifiedRatingValue?: number | undefined;
    bestRating?: number | undefined;
    worstRating?: number | undefined;
    ratingValue?: number | undefined;

    constructor(data?: IRatings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.originalRatingValue = data["originalRatingValue"];
            this.alternateName = data["alternateName"];
            this.simplifiedRatingValue = data["simplifiedRatingValue"];
            this.bestRating = data["bestRating"];
            this.worstRating = data["worstRating"];
            this.ratingValue = data["ratingValue"];
        }
    }

    static fromJS(data: any): Ratings {
        data = typeof data === 'object' ? data : {};
        let result = new Ratings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["originalRatingValue"] = this.originalRatingValue;
        data["alternateName"] = this.alternateName;
        data["simplifiedRatingValue"] = this.simplifiedRatingValue;
        data["bestRating"] = this.bestRating;
        data["worstRating"] = this.worstRating;
        data["ratingValue"] = this.ratingValue;
        return data; 
    }
}

export interface IRatings {
    originalRatingValue?: number | undefined;
    alternateName?: string | undefined;
    simplifiedRatingValue?: number | undefined;
    bestRating?: number | undefined;
    worstRating?: number | undefined;
    ratingValue?: number | undefined;
}

export class Publisher implements IPublisher {
    name?: string | undefined;
    logo?: string | undefined;
    type?: string | undefined;
    url?: string | undefined;

    constructor(data?: IPublisher) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.logo = data["logo"];
            this.type = data["type"];
            this.url = data["url"];
        }
    }

    static fromJS(data: any): Publisher {
        data = typeof data === 'object' ? data : {};
        let result = new Publisher();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["logo"] = this.logo;
        data["type"] = this.type;
        data["url"] = this.url;
        return data; 
    }
}

export interface IPublisher {
    name?: string | undefined;
    logo?: string | undefined;
    type?: string | undefined;
    url?: string | undefined;
}

export class Authors implements IAuthors {
    name?: string | undefined;
    url?: string | undefined;

    constructor(data?: IAuthors) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.url = data["url"];
        }
    }

    static fromJS(data: any): Authors {
        data = typeof data === 'object' ? data : {};
        let result = new Authors();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["url"] = this.url;
        return data; 
    }
}

export interface IAuthors {
    name?: string | undefined;
    url?: string | undefined;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if(result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}

}